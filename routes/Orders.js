const express = require('express');
const Order = require('../models/Order');
const Product = require('../models/Product');
const { adminAuth } = require('../middleware/auth');

const router = express.Router();

// Create new order (from store checkout) - FIXED
router.post('/', async (req, res) => {
  try {
    const { items, customerInfo, totalPrice } = req.body;

    console.log('Received order data:', { items: items?.length, customerInfo: customerInfo?.name, totalPrice });

    // Validation
    if (!items || !Array.isArray(items) || items.length === 0) {
      return res.status(400).json({ message: 'يجب أن يحتوي الطلب على منتج واحد على الأقل' });
    }

    if (!customerInfo || !totalPrice) {
      return res.status(400).json({ message: 'بيانات الطلب ناقصة' });
    }

    // Validate customer info
    const { name, phone, wilaya, address } = customerInfo;
    if (!name || !phone || !wilaya || !address) {
      return res.status(400).json({ message: 'جميع بيانات العميل مطلوبة' });
    }

    // Validate phone number
    const phoneRegex = /^0[5-7][0-9]{8}$/;
    if (!phoneRegex.test(phone)) {
      return res.status(400).json({ message: 'رقم الهاتف غير صحيح' });
    }

    // Validate items and check stock
    for (let item of items) {
      if (!item.id || !item.name || !item.price || !item.quantity) {
        return res.status(400).json({ message: 'بيانات المنتج ناقصة' });
      }

      // Try to find product by ID, but don't fail if it doesn't exist in database
      try {
        const product = await Product.findById(item.id);
        if (product) {
          if (!product.inStock || product.stockQuantity < item.quantity) {
            return res.status(400).json({ 
              message: `المنتج غير متوفر بالكمية المطلوبة: ${product.name}` 
            });
          }
        }
      } catch (error) {
        // Product not found in database, but we'll still create the order
        console.log(`Product ${item.id} not found in database, but creating order anyway`);
      }
    }

    // Create order - DO NOT manually set orderNumber, let pre-save middleware handle it
    const order = new Order({
      customerInfo: {
        name: customerInfo.name.trim(),
        email: customerInfo.email ? customerInfo.email.trim() : undefined,
        phone: customerInfo.phone.trim(),
        wilaya: customerInfo.wilaya.trim(),
        city: customerInfo.city ? customerInfo.city.trim() : undefined,
        address: customerInfo.address.trim(),
        notes: customerInfo.notes ? customerInfo.notes.trim() : undefined
      },
      items: items.map(item => ({
        productId: item.id, // This might not exist in DB, but we store it anyway
        productName: item.name.trim(),
        price: parseFloat(item.price),
        quantity: parseInt(item.quantity),
        image: item.image || undefined
      })),
      totalPrice: parseFloat(totalPrice),
      status: 'pending'
      // orderNumber will be generated by pre-save middleware
    });

    // Manual fallback - ensure orderNumber exists before saving
    if (!order.orderNumber) {
      const timestamp = Date.now().toString();
      const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');
      order.orderNumber = `ORD-${timestamp.slice(-6)}${random}`;
      console.log('Manually set orderNumber:', order.orderNumber);
    }

    console.log('About to save order...');
    await order.save();
    console.log('Order saved successfully with orderNumber:', order.orderNumber);

    // Update product stock for products that exist in database
    for (let item of items) {
      try {
        const product = await Product.findById(item.id);
        if (product) {
          product.stockQuantity -= item.quantity;
          if (product.stockQuantity <= 0) {
            product.inStock = false;
          }
          await product.save();
          console.log(`Updated stock for product ${item.id}: ${product.stockQuantity} remaining`);
        }
      } catch (error) {
        console.log(`Couldn't update stock for product ${item.id}:`, error.message);
      }
    }

    res.status(201).json({
      message: 'تم إنشاء الطلب بنجاح',
      order: {
        _id: order._id,
        orderNumber: order.orderNumber,
        status: order.status,
        totalPrice: order.totalPrice,
        createdAt: order.createdAt
      }
    });
  } catch (error) {
    console.error('Create order error:', error);
    
    // Handle specific MongoDB errors
    if (error.name === 'ValidationError') {
      const messages = Object.values(error.errors).map(err => err.message);
      return res.status(400).json({ 
        message: 'خطأ في التحقق من البيانات',
        details: messages 
      });
    }
    
    if (error.code === 11000) {
      return res.status(400).json({ message: 'رقم الطلب مكرر، يرجى المحاولة مرة أخرى' });
    }
    
    res.status(500).json({ 
      message: 'خطأ في إنشاء الطلب',
      error: process.env.NODE_ENV === 'development' ? error.message : 'خطأ داخلي في الخادم'
    });
  }
});

// Get all orders (Admin only)
router.get('/', adminAuth, async (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 20;
    const skip = (page - 1) * limit;
    const status = req.query.status;
    const search = req.query.search;

    // Build query
    const query = {};
    
    if (status && status !== 'all') {
      query.status = status;
    }

    if (search) {
      query.$or = [
        { orderNumber: { $regex: search, $options: 'i' } },
        { 'customerInfo.name': { $regex: search, $options: 'i' } },
        { 'customerInfo.phone': { $regex: search, $options: 'i' } }
      ];
    }

    const orders = await Order.find(query)
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limit);

    const total = await Order.countDocuments(query);

    res.json({
      orders,
      pagination: {
        current: page,
        pages: Math.ceil(total / limit),
        total
      }
    });
  } catch (error) {
    console.error('Get orders error:', error);
    res.status(500).json({ message: 'خطأ في جلب الطلبات' });
  }
});

// Get single order (Admin only)
router.get('/:id', adminAuth, async (req, res) => {
  try {
    const order = await Order.findById(req.params.id);

    if (!order) {
      return res.status(404).json({ message: 'الطلب غير موجود' });
    }

    res.json(order);
  } catch (error) {
    console.error('Get order error:', error);
    res.status(500).json({ message: 'خطأ في جلب الطلب' });
  }
});

// Update order status (Admin only)
router.patch('/:id/status', adminAuth, async (req, res) => {
  try {
    const { status, notes, trackingNumber } = req.body;

    if (!status) {
      return res.status(400).json({ message: 'حالة الطلب مطلوبة' });
    }

    const validStatuses = ['pending', 'confirmed', 'processing', 'shipped', 'delivered', 'cancelled'];
    if (!validStatuses.includes(status)) {
      return res.status(400).json({ message: 'حالة الطلب غير صحيحة' });
    }

    const order = await Order.findById(req.params.id);
    if (!order) {
      return res.status(404).json({ message: 'الطلب غير موجود' });
    }

    // Update order
    order.status = status;
    if (notes !== undefined) order.notes = notes;
    if (trackingNumber !== undefined) order.trackingNumber = trackingNumber;

    await order.save();

    res.json({
      message: 'تم تحديث حالة الطلب بنجاح',
      order: {
        orderNumber: order.orderNumber,
        status: order.status,
        trackingNumber: order.trackingNumber
      }
    });
  } catch (error) {
    console.error('Update order status error:', error);
    res.status(500).json({ message: 'خطأ في تحديث حالة الطلب' });
  }
});

// Delete order (Admin only)
router.delete('/:id', adminAuth, async (req, res) => {
  try {
    const order = await Order.findById(req.params.id);
    if (!order) {
      return res.status(404).json({ message: 'الطلب غير موجود' });
    }

    // If order is not delivered or cancelled, restore stock for products that exist
    if (!['delivered', 'cancelled'].includes(order.status)) {
      for (let item of order.items) {
        try {
          const product = await Product.findById(item.productId);
          if (product) {
            product.stockQuantity += item.quantity;
            product.inStock = true;
            await product.save();
          }
        } catch (error) {
          console.log(`Couldn't restore stock for product ${item.productId}:`, error.message);
        }
      }
    }

    await Order.findByIdAndDelete(req.params.id);

    res.json({ message: 'تم حذف الطلب بنجاح' });
  } catch (error) {
    console.error('Delete order error:', error);
    res.status(500).json({ message: 'خطأ في حذف الطلب' });
  }
});

// Get order statistics (Admin only)
router.get('/stats/dashboard', adminAuth, async (req, res) => {
  try {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    const startOfWeek = new Date(today);
    startOfWeek.setDate(today.getDate() - 7);
    
    const startOfMonth = new Date(today);
    startOfMonth.setDate(today.getDate() - 30);

    const [
      totalOrders,
      pendingOrders,
      todayOrders,
      weekOrders,
      monthRevenue
    ] = await Promise.all([
      Order.countDocuments(),
      Order.countDocuments({ status: 'pending' }),
      Order.countDocuments({ createdAt: { $gte: today } }),
      Order.countDocuments({ createdAt: { $gte: startOfWeek } }),
      Order.aggregate([
        {
          $match: {
            createdAt: { $gte: startOfMonth },
            status: { $in: ['delivered', 'shipped'] }
          }
        },
        {
          $group: {
            _id: null,
            total: { $sum: '$totalPrice' }
          }
        }
      ])
    ]);

    res.json({
      totalOrders,
      pendingOrders,
      todayOrders,
      weekOrders,
      monthRevenue: monthRevenue[0]?.total || 0
    });
  } catch (error) {
    console.error('Get order stats error:', error);
    res.status(500).json({ message: 'خطأ في جلب إحصائيات الطلبات' });
  }
});

module.exports = router;